
#include "autoware_auto_perception_msgs/msg/ObjectClassification.idl"
#include "autoware_auto_perception_msgs/msg/Shape.idl"
#include "autoware_auto_perception_msgs/msg/PredictedObjectKinematics.idl"
#include "unique_identifier_msgs/msg/UUID.idl"

module autoware_auto_perception_msgs {
  module msg {
    module ObjectClassification_Constants {
      const uint8 UNKNOWN = 0;
      const uint8 CAR = 1;
      const uint8 TRUCK = 2;
      const uint8 BUS = 3;
      const uint8 TRAILER = 4;
      const uint8 MOTORCYCLE = 5;
      const uint8 BICYCLE = 6;
      const uint8 PEDESTRIAN = 7;
    };

    struct PredictedObjectUE {
      std_msgs::msg::Header header;
      unique_identifier_msgs::msg::UUID object_id;

      @range (min=0.0, max=1.0)
      float existence_probability;

      geometry_msgs::msg::Pose pose;

      @verbatim (language="comment", text=
        " Each pathes are divided by pose with position = {0.0, 0.0, 0.0}"
        " Prediction confidence of each pathes are stored in path confidences ")
      sequence<geometry_msgs::msg::Pose> pathes;
      sequence<float> path_confidences;

      @verbatim (language="comment", text=
        " x: the length of the object (BOUNDING_BOX) or diameter (CYLINDER)"
        " y: the width of the object (BOUNDING_BOX)"
        " z: the overall height of the object")
      geometry_msgs::msg::Vector3 dimension;

      sequence<uint8> classifications;
      sequence<float> classification_confidences;
    };
  };
};
